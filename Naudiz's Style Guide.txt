Preamble:

    The following keywords are used to clarify the importance of each convention: MUST, SHOULD, MAY, SHOULD NOT, MUST NOT.
    
    In the code examples below, the sequence "// ..." (two slashes, one space, three full stops) denotes a line where, in most cases, more code should be written.
    However, such code is unnecessary for the purposes of each example.
    
    Comments from the writer that do not necessarily dictate style guidelines are preceded by the sequence "// NAZ: ". 

1: Identifiers

    1.1: Variables and Constants
    
        Note:

            Variables MUST be written using camelCase, while constants MUST use SCREAMING_SNAKE_CASE.
            Related identifiers SHOULD share the leading parts of their names for alphabetization purposes.
            
            DO:
            
                let posX;
                let posY;
                const BOSS_RUMIA = 0i;
                const BOSS_CIRNO = 1i;
                
            DON'T:
            
                let xPos;
                let yPos;
                const RUMIA_BOSS = 0i;
                const CIRNO_BOSS = 1i;
            
        
        1.1.1: Local Variables
            
            Variables defined within a local scope, such as inside a function or task, MUST use camelCase without any underscores.
            
            EXAMPLE:
            
                function DoSomething()
                {
                    let posX;
                    let posY;
                    // ...
                }
            
        
        1.1.2: Global Variables
            
            Variables defined globally in any script SHOULD be denoted with a leading underscore.
            This is similar to the notation used for tasks, but with camelCase instead of PascalCase.
            
            EXAMPLE:
            
                let _objEnemy;
                let _objPlayer;
                
                @Initialize
                {
                    // ...
                }
            
        
        1.1.3: Parameters
        
            Function and task parameters SHOULD be denoted with a trailing underscore.
            
            EXAMPLE:
            
                function DoSomethingElse(foo_, bar_)
                {
                    // ...
                }
            
        
        1.1.4: Constants
        
            As mentioned previously, constants MUST use SCREAMING_SNAKE_CASE. All constants SHOULD be declared in a dedicated constant library.
            Numeric constants SHOULD be integers instead of real numbers (currently denoted by the "i" suffix at the end of the literal).
            
            EXAMPLE:
            
                const PLAYER_REIMU = 0i;
                const PLAYER_MARISA = 1i;
                const PLAYER_MIMA = 2i;
                const PLAYER_YUKA = 3i;
            
        
    
    1.2: Functions, Tasks, and Subroutines
    
        Note:
            
            Function, task, and subroutine names all MUST use PascalCase to differentiate them from other identifiers.
            The root of the identifier name SHOULD begin with a verb.
            
            // NAZ: The "Is...Exists" structure is Engrish through and through, but I use it for consistency with built-in function names.
            
            EXAMPLE:
                
                function DoSomething()
                {
                    // ...
                }
                
                function GetSomething(foo_)
                {
                    // ...
                }
                
                function SetSomething(foo_, bar_)
                {
                    // ...
                }
                
                function IsSomethingExists(foo_)
                {
                    // ...
                }
            
        
        1.2.1: Functions
            
            Function names MUST use PascalCase with no underscores.*
            Function calls require trailing parentheses, even when there are no arguments.
            
            *Excluding cases where there is a necessary prefix or suffix denoting important information, such as object type.
            
            EXAMPLE:
            
                function DoSomething()
                {
                    // ...
                }
                
                function DoSomethingElse(foo_, bar_)
                {
                    DoSomething();
                    // ...
                }
                
                function Obj_DoSomething(obj_)
                {
                    // ...
                }
                
                function DoSomething_Obj_Obj(obj1_, obj2_)
                {
                    // ...
                }
            
        
        1.2.2: Tasks
            
            Task names MUST use PascalCase with a leading underscore. The same rules about affixes and parentheses that apply to functions apply here.
            
            // NAZ: I like to treat my tasks as private routines, so often times you'll see me create a "public" function that calls task nested inside.
            
            EXAMPLE:
            
                task _RenderPlayer(_id)
                {
                    // ...
                }
                
                task _RenderPlayer_Reimu()
                {
                    _RenderPlayer(PLAYER_REIMU);
                    // ...
                }
            
        
        1.2.3: Subroutines
        
            Subroutines MUST use PascalCase with a trailing underscore. Parentheses MAY be used.
            
            // NAZ: I don't think I've ever used one of these, lol. I came up with the underscore rule on the fly.
            
            EXAMPLE:
            
                sub DoSomethingDifferent_()
                {
                    // ...
                }
            
        
    

2: Whitespace
    
    Note:
    
        For the sake of consistency, spaces MUST be used instead of tabs in ALL cases.
        The default tab is equivalent to 4 spaces; any decent editor should have an option to insert spaces upon pressing the tab key.
    
    2.1: Operators
    
        Expressions and statements consisting of one or more literals and/or identifiers MUST employ one space on both sides of all binary and ternary operators
        (= +, -, *, /, %, ^, ~, +=, -=, *=, /=, %=, ^=, ~=, ==, !=, >, <, >=, <=, &&, ||, &, |, ^^, .., ?, :).
        
        Expressions and statements consisting of an identifier and a unary operator (!, ++, --) MUST NOT employ a space between the operator and operand.
        
        DO:
        
            let someNum = 6 * 9 + 4 / 20 - 6 % 66;
            someNum++;
        
        DON'T:
        
            let someNum = 6*9+4/20-6%66;
            someNum ++;
        
        // NAZ: I will literally kill you if you don't put spaces in between your operators like in the "DON'T" example. It's entirely unreadable for me.
    
    2.2: Variables and Constants
    
        Variable and constant declaration and assignment statements MUST employ one space between the keyword (let, var, const) and the identifier,
        and on both sides of the assignment operator (=) if applicable.*
        
        There is a limit of one declaration or assignment statement per line.
        
        *Additional spaces MAY be used to vertically align the operator and right-hand side of each statement in a group of statements. See the example.
        
        EXAMPLE:
        
            const BGM_TITLE     = 0i;
            const BGM_1_ROAD    = 1i;
            const BGM_1_BOSS    = 2i;
            const BGM_GAMEOVER  = 3i;
        
    
    2.3: Functions, Tasks, and Subroutines
    
        Function, task, and subroutine definitions MUST employ one space between the keyword (function, task, or sub) and the identifier,
        and NO space between the identifier and the parentheses, differently from flow control statements.
        Parameters contained inside the parentheses MUST employ one space between each identifier, i.e. after each comma.
        
        The opening and closing braces of a function, task, or subroutine block MUST go on their own lines, and all lines in between them MUST be indented.
        There MUST also be an empty line following each closing brace.
        The same rules also apply to @Initialize, @MainLoop, @Event, @Finalize, and @Loading.
        
        Function, task, and subroutine invocations MUST NOT include a space between the identifier and parentheses, if applicable.
        Like parameters, arguments MUST be separated by whitespace, i.e. after each comma.
        
        Function and task arguments MAY span several indented lines for readability purposes.
        There SHOULD be an empty space following each multi-line function call, unless it precedes a closing brace or parenthesis.
        
        // NAZ: This is only really applicable if the arguments get unbearably long, though. The example just demonstrates it just because.
        
        EXAMPLE:
        
            @Initialize
            {
                DoSomething(
                    true,
                    false
                );
                
                // ...
            }
            
            function DoSomething(foo_, bar_)
            {
                // ...
            }
        
    
    2.4: Flow Control Statements
    
        Flow control statements MUST employ whitespace on both sides of each keyword
        (if, else, loop, while, ascent, descent, in, for, each, alternative, case, others, switch, default, local, yield, break, continue),
        unless said keyword by itself is a statement (yield, break, continue), in which case it is simply terminated with a semicolon.
        
        For conditionals and loops, the opening curly brace MUST go on the same line as the preceding keyword or closing parenthesis, following a space.*
        The closing curly brace MUST go on its own line, except in the case of "else" and "else if" which SHOULD be written after a space following the closing brace.
        Loops and conditional structures SHOULD be followed by an empty line.
        
        For for-loops, each statement ending in a semicolon MUST be followed by a space, i.e. the first and second.
        The second and third statements may be omitted, in which case a space SHOULD be used instead.
        
        *Conditionals and loops containing a single statement terminated with a semicolon MAY be written without curly braces,
        in which case they SHOULD be written on the same line as the rest of the statement, following a space.
        Nested conditionals and loops may also be written without curly braces, provided that there is only one semicolon-terminated statement within it.
        Alternative cases written this way MAY use additional spaces to align their contents.
        
        EXAMPLE 1 (VERBOSE):
        
            for (let i = 1; i <= 10; i++) {
                alternative (i)
                case (1) {
                    WriteLog("i is 1!");
                }
                case (2) {
                    WriteLog("i is 2!");
                }
                others {
                    WriteLog("I can't count that high!");
                }
                
                if (i >= 3) {
                    break;
                } else {
                    loop (5) {
                        yield;
                    }
                }
            }
        
        EXAMPLE 2 (CONCISE):
        
            for (let i = 1; i <= 10; i++) {
                alternative (i)
                case (1)    WriteLog("i is 1!");
                case (2)    WriteLog("i is 2!");
                others      WriteLog("I can't count that high!");
                
                if (i >= 3) break;
                else loop (5) yield;
            }
        
        // NAZ: With "wait" being built-in there's no use case for "loop (n) yield;".
        // NAZ: I simply wanted to demonstrate nested structures and how they can be shortened.
    
    2.5: Arrays
        
        Arrays elements MUST be separated by whitespace, i.e. after each comma.
        
        Multidimensional or otherwise verbose arrays MAY be written across several indented lines.
        The initial opening square brace MUST go on the same line as the operator that precedes it.
        The new lines and indenting SHOULD be consistent throughout each dimension of the array.
        There SHOULD be an empty space following each multi-line array, unless it precedes a closing brace or parenthesis.
        
        For performance reasons, arrays SHOULD be indexed as infrequently as possible.
        If only one element is needed, storing it in a variable is recommended.
        
        EXAMPLE:
            
            let arrSmall = [1, 2, 3];
            let arrBig = [
                [1, 2, 3],
                [4, 5, 6, 7],
                [8, 9, 10, 11, 12]
            ];
            
            let arrBigger = [
                [
                    [1, 2, 3],
                    [4, 5, 6, 7],
                ], [
                    [8, 9, 10, 11, 12],
                    [13, 14, 15, 16, 17, 18],
                    [19, 20, 21, 22, 23, 24, 25],
                ]
            ];
            
            let numSmall = arrSmall[2];
            let numBig = arrBig[2][4];
            let numBigger = arrBigger[1][2][6];
        
    

