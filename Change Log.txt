A mostly-complete history log of engine updates can be found here.

1.20b:
	- Fixed a bug that caused for loops using new variables to not function correctly.
	- Fixed a bug that caused all GetColor functions to return incorrect values. (Including GetShotDataInfoA1)
	- Fixed a bug where off-centered player hitboxes would behave strangely.
	- Fixed the game crashing on script end/retry. (How the fuck did I not notice this before 1.20a release bloody hell)
	- Added ObjShot_SetSpinAngularVelocity.

1.20a:
	- Reworked some math calculations. SIMD instructions are utilized.
		- A legacy version will also be provided in case your CPU do not support vectorization.
			- The vectorized version requires the following instruction sets:
				- SSE
				- SSE2
				- SSE3
				- SSE4.1
			- Generally, you should be able to run it unless your PC is from 30000BC or you're using a literal potato.
	- Added a native hitbox visualization mode.
	- Improved the line-circle intersection algorithm. New algorithm behaves like a circle-polygon intersection.
	- Overloaded ObjMove_SetDestAtFrame, where movement interpolation mode can be specified.
	- Fixed a bug where the graze count obtained via GetGraze() may desync with the one obtained via EV_GRAZE's event argument.
	- Fixed a bug where ObjText_GetTotalWidth/Height may break the font tag.
	- Fixed a bug where font text tag properties do not get reset after using ObjText_SetText.
	- Obj_GetValue will now ACTUALLY NOT crash the game if the requested value does not exist.
	- Renamed the "Obj_[..]ValueR" function series to "Obj_[..]ValueI".
	- Removed the constant 'pi'. Please use 'M_PI' instead.
	- Changed error messages of some default functions to be more descriptive to aid debugging.
	- Greatly improved script variable allocation.
	- Added a concatenate-assign operator. (~=)
	- Added bitwise operators. (~, &, |, ^^)
	- Int values can now be declared with a suffix 'i' or 'I'.
		- Static type declaration is planned.
	- Added implicit type casting in default script operations, including comparison and assignment.
	- Optimized the process of calling default constants.
	- The default constants SCREEN_WIDTH and SCREEN_HEIGHT will now change to reflect the settings in th_dnh.def.
	- Some functions will now return int values rather than real values.
	- Fixed a bug where itoa, atoi, and IntToString would underflow if the input is larger than 2^31-1. (New limit is 2^63-1)
	- Fixed a bug where the 3D viewport would get stretched out based on the size of the STG frame.
	- Made the game no longer freeze and crash after Alt-Tab'ing out of true fullscreen mode or after waking the desktop from sleep.
	- Pseudo-fullscreen mode now stops Windows from drifting off to Dreamland.
	- Fixed a mistake involving matrix multiplication order in the internal shader for particle list objects.
	- Removed CollectItemsByType and SetItemIntersectionRadius.
	- Added new event, EV_COLLECT_ITEM, which triggers when the item starts to move towards the player.
	- Fixed a bug where ObjShot_SetIntersectionScale[XY] does not scale the position offset.
	- If ObjFile_Open/ObjFile_OpenNW fails, the reason for failure will now be written to the LogWindow.
	- The ObjFileB_Read[...] functions no longer throw an error when attempting to read past EOF.
		- ObjFileB_GetLastRead can be used to obtain the amount of bytes read in the last read operation.
	- Various optimizations.
	- Un-Utilized UPX Executable Packer to not-reduce file size.

1.10c:
	- Fixed a bug in the UserShotData where rect can override animation_data.
	- Fixed a bug in the UserShotData where collision did not work at all.
	- Added functionality to change the color of the delay cloud per-shot.
	- Fixed a parser bug with nested single-lined statements.
	- Fixed a rare bug where object IDs may get duplicated when objects are created in rapid succession.
	- Fixed a bug where the default charset for some fonts are incorrectly determined.
	- Utilized UPX Executable Packer to reduce file size.

1.10b:
	- Fixed bugs with logical and ternary statements.
	- Improved data packing of common data files. (Files saved with 1.10a are now incompatible.)
	- Bug fixes and optimizations.

1.10a:
	- Fixed some random and function-related crashes.
	- RenderToTextureXX alpha fix ported+modified from th_dnh_woo.
	- Replaced ObjLaser_SetGrazeInvalidFrame with ObjShot_SetGrazeInvalidFrame.
	- Alpha channel blending now exists in all blend modes except BLEND_NONE and BLEND_ADD_RGB.
	- Fixed a bug where NotifyEvent and SetScriptArgument could not reach package-level scripts when called from a stage-level script.
	- Event arguments will no longer be overwritten when notifying nested events inside @Event.
	- Utilized variadic argument counts for the functions in the NotifyEvent series.
	- Utilized variadic argument counts for the WriteLog function.
	- Added transform functions for ObjPatternShot and relevant sample scripts, for former and current ECL modders.
		- Please note that they may not be able to fully emulate ECL's behaviours.
	- Added functionality to customize delay clouds.
	- Added an option to use true fullscreen mode in the config.
	- "Operation-assign" operators (+=, -=, ++, etc.) now work on indexed arrays.
		- Given: a = [1, 2, 3]
			- a[0]++		= [2, 2, 3]
			- a[2] *= 3		= [1, 2, 9]
			- a += [5, 6]	= [6, 8, 3]
		- Given: b = [[1, 2], [3, 4], [5, 6]]
			- b[0] += 3 	= [[4, 5], [3, 4], [5, 6]]
			- b[2]-- 		= [[1, 2], [3, 4], [4, 5]]
	- Array indexing/slicing operations now automatically truncate indices.
	- Array slicing operation can now reverse an array.
		- Given: a = [10, 12, 14, 16, 18, 20]
			- a[0..3]		= [10, 12, 14]
			- a[3..0]		= [14, 12, 10]
			- a[1..0]		= [10]
			- a[6..2]		= [20, 18, 16, 14]
			- a[2..2]		= []
	- Added ternary statements.
	- NO_CHANGE can now be used in the ObjMove_AddPatternBX functions.
	- ObjMove_SetAngle and ObjMove_SetSpeed can now be used on B-pattern objects.
	- Line-line intersection is now properly implemented.
	- IsIntersected_Line_Circle can now be used in package-level scripts.
	- Added a particle renderer object (ObjParticleList) and new relevant sample scripts.
	- Added support for vertex indexing.
	- Added support for basic directional lighting.
	- Improved vertex shader support, and added sample scripts for demonstration.
	- Fixed underflowing and overflowing issues with SetColor/SetAlpha functions.
	- Fixed a bug where ObjText_SetFontCharacterSet doesn't work at all.
	- Added more options to the [font] text tag.
		- Available tag options:
			- reset
				- Resets the text to its original settings.  Present in vanilla ph3 as "clear".
			- size
				- Adjusts font size. Unchanged from vanilla ph3.
			- ox/oy
				- Adjusts position offset.
			- it
				- Toggles italic. (true/false or 1/0)
			- wg
				- Adjusts font weight.
			- br/bg/bb
				- Adjusts font bottom color.
			- tr/tg/tb
				- Adjusts font top color.
			- or/og/ob
				- Adjusts font border color.
			- bc
				- Adjusts font bottom color as an (r, g, b) list.
			- tc
				- Adjusts font top color as an (r, g, b) list.
			- oc
				- Adjusts font border color as an (r, g, b) list.
	- Added more options to the [ruby] text tag.
		- Available tag options:
			- rb
				- Sets text. Unchanged from vanilla ph3.
			- rt
				- Sets ruby(furigana) text. Unchanged from vanilla ph3.
			- sz
				- Adjusts the ruby text's font size.
			- wg
				- Adjusts the ruby text's font weight.
			- ox
				- Adjusts the ruby text's left margin.
			- op
				- Adjusts the ruby text's side pitch.
	- Improved spacing of ruby text.
	- ObjFileT now properly reads from and writes to UTF-8 text files.
	- ObjFile_OpenNW now allows both reading and writing, unless the file was stored in a .dat archive, in which case all write functions will fail.
	- Pulled the plug on Shift-JIS support in favour of proper Unicode (UTF-8 and UTF-8-BOM) handling.
	- Better Metasequoia mesh support, and temporarily(?) suspended Elfreina mesh support. Blender .obj mesh support is planned.
	- The player object will now set its own movement speed and angle according to user key input.
	- Collecting user-defined items now notify EV_GET_ITEM to the player script.
	- Minimum custom window size is reduced to 320*240.
	- GetShotDataInfoA1 no longer throws an error upon receiving an invalid graphic ID, and will instead return default values.
	- Fixed a bug where the right and bottom source rect set with ObjSprite3D_SetSourceDestRect are 1 greater than expected.
	- Improved loading of .wav files.
	- Attempted to fix a bug where multiple sound objects simultaneously playing the same sound file (>1MB .wav, .ogg, or .mp3) would display strange behaviours.
	- Improved the precision of ObjSound_GetWavePosition, and fixed an issue where ObjSound_GetTotalLength would work incorrectly with .ogg files.
	- Added bitwise operators.
	- Greatly improved the LogWindow's Script panel.
	- Added a text showing the available video memory in the LogWindow's Texture panel.
	- Added a text showing the used RAM and CPU in the LogWindow's Info panel.
	- Enforced semicolons before closing braces.
	- Removed ObjShot_AddShotA1/2.
	- Various optimizations.

1.00a:
	- Multidimensional array assignments are now possible.
	- Arithmetic operations on array(s) are possible. (Left-right order is important)
		- [1, 2, 3] + 5 		= [6, 7, 8]
		- [5, 5, 1] * 2 		= [10, 10, 2]
		- [2, 3, 4] - [7, 0, 2] = [-5, 3, 1]
		- [10, 10, 10] / [5, 2] = [2, 5, 10]
		- [2, 3] % [4, 2, 1, 6] = [2, 1]
		- 4 + [2, 3, 6, 2]		= 8
	- Added support for multiple-pass shaders.
	- Shot and item objects no longer respond to changes in X and Y angles.
	- Bullet limit of 8192 for performance reasons.
	- Multiple hitbox support for shot objects has been removed.
	- Vertex shader support.
	- Much smaller replay files.
	- Added an option to specify the skip mode speed in th_dnh.def.
	- Obj_GetValue will not crash the game if the requested value does not exist.